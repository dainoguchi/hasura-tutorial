package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"log"
	"remote-schema/graph/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	p := &model.Product{
		Name: input.Name,
	}

	if err := r.DB.Create(p).Error; err != nil {
		return nil, err
	}

	return p, nil
}

// MaskingProducts is the resolver for the masking_products field.
func (r *queryResolver) MaskingProducts(ctx context.Context) ([]model.Product, error) {
	var products []model.Product

	if err := r.DB.Find(&products).Error; err != nil {
		log.Println(err)
		return nil, err
	}

	for _, product := range products {
		product.Name = "xxxxxxxxx"
	}

	return products, nil
}
