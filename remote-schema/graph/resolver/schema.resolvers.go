package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"remote-schema/graph/generated"
	"remote-schema/graph/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.NewProduct) (*model.Product, error) {
	p := &model.Product{
		ID:   len(r.products) + 1,
		Name: input.Name,
	}
	r.products = append(r.products, p)

	return p, nil
}

// MaskingProducts is the resolver for the masking_products field.
func (r *queryResolver) MaskingProducts(ctx context.Context) ([]*model.Product, error) {
	products := r.products
	for _, product := range products {
		product.Name = "xxxxx"
	}

	return products, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
